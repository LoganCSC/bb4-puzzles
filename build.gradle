// Copyright by Barry G. Becker, 2013. Licensed under MIT License: http://www.opensource.org/licenses/MIT

import org.gradle.api.internal.artifacts.publish.DefaultPublishArtifact

description = 'A library project containing a collection of heuristic optimization algorithms.'
group = 'com.barrybecker4'
version = '1.1.2-SNAPSHOT'

apply from: 'https://raw.github.com/barrybecker4/bb4-common/master/bb4.gradle'

project.archivesBaseName = 'bb4-puzzle'
mainClassName = "com.barrybecker4.puzzle.maze.ui.MazeSimulator"

task runAdventure(type: JavaExec, depends: classes) {
    main = 'com.barrybecker4.puzzle.adventure.ui.GraphicalAdventure'
    classpath = sourceSets.main.runtimeClasspath
}

task runTextAdventure(type: JavaExec, depends: classes) {
    main = 'com.barrybecker4.puzzle.adventure.TextAdventure'
    classpath = sourceSets.main.runtimeClasspath
    args = ['ludlow/ludlowScript.xml']
}

task runMaze(type: JavaExec, depends: classes) {
    main = 'com.barrybecker4.puzzle.maze.ui.MazeSimulator'
    classpath = sourceSets.main.runtimeClasspath
}

task runRedPuzzle(type: JavaExec, depends: classes) {
    main = 'com.barrybecker4.puzzle.redpuzzle.ui.RedPuzzle'
    classpath = sourceSets.main.runtimeClasspath
}

task runTantrixPuzzle(type: JavaExec, depends: classes) {
    main = 'com.barrybecker4.puzzle.tantrix.ui.TantrixPuzzle'
    classpath = sourceSets.main.runtimeClasspath
    //args = ['-name', 'galactic',  '-locale', 'ENGLISH']
}

task runSudoku(type: JavaExec, depends: classes) {
    main = 'com.barrybecker4.puzzle.sudoku.ui.SudokuPuzzle'
    classpath = sourceSets.main.runtimeClasspath
    jvmArgs = ["-ea"]
}

task runHiQ(type: JavaExec, depends: classes) {
    main = 'com.barrybecker4.puzzle.hiq.ui.HiQPuzzle'
    classpath = sourceSets.main.runtimeClasspath
    args = ['-locale', 'ENGLISH']
}


dependencies {
   compile 'com.barrybecker4:bb4-sound:1.1.2-SNAPSHOT'
   compile 'com.barrybecker4:bb4-optimization:1.1.2-SNAPSHOT'
}


task puzzleJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/puzzle/common/**'
    baseName = 'bb4-puzzle'
    manifest {
        attributes 'Implementation-Title': 'Puzzle common code',
            'Implementation-Version': version,
            provider: 'gradle',
            'Main-Class': mainClassName
    }
}
task adventureJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/puzzle/adventure/**'
    exclude 'com/barrybecker4/puzzle/adventure/**/*.pdf'
    baseName = 'bb4-adventure'
}
task hiqJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/puzzle/hiq/**'
    baseName = 'bb4-hiq'
}
task mazeJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/puzzle/maze/**'
    baseName = 'bb4-maze'
}
task redpuzzleJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/puzzle/redpuzzle/**'
    baseName = 'bb4-redpuzzle'
}
task sudokuJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/puzzle/sudoku/**'
    baseName = 'bb4-sudoku'
}
task tantrixJar(type: Jar) {
    from sourceSets.main.output
    include 'com/barrybecker4/puzzle/tantrix/**'
    baseName = 'bb4-tantrix'
}

def jarTasks = [puzzleJar, adventureJar, hiqJar, mazeJar, redpuzzleJar, sudokuJar, tantrixJar]

artifacts {
    jarTasks.each{ jarTask -> archives jarTask }

    archives sourcesJar
    archives javadocJar
}

jar {
    // skip building the default jar that contains everything
    enabled = false
}

// I don't want this in every gradle file. Can it be moved to bb4.gradle? Maybe jarTasks can be a project var?
// Unfortunately, this processing happens at configuration time.
uploadArchives {
    repositories {
        mavenDeployer {
            // Maven does not allow more than one jar per pom file. Filter is used to make many artifacts.
            jarTasks.each{ jarTask ->
                def jarName = 'bb4-' + jarTask.name - 'Jar'
                addFilter(jarTask.name) {artifact, file ->
                    artifact.name == jarName
                }
            }
        }
    }
}
